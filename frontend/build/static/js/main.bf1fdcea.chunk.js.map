{"version":3,"sources":["util/spotify-web-api.js","components/MainUI/Navigation.js","pages/Landing.js","components/MainUI/Footer.js","components/MainUI/NavigationLinks.js","components/MainUI/PageContainer.js","components/Journey/JourneyRow.js","util/auth-context.js","components/Journey/JourneyTable.js","controllers/spotifyShaper.js","pages/Journey.js","App.js","index.js"],"names":["SpotifyWebApi","_baseUri","_accessToken","_promiseImplementation","WrapPromiseWithAbort","promise","onAbort","abort","_extend","args","Array","prototype","slice","call","arguments","target","objects","forEach","object","j","hasOwnProperty","_performRequest","requestData","callback","req","XMLHttpRequest","promiseFunction","resolve","reject","type","open","url","parameters","qs","key","value","encodeURIComponent","length","substring","_buildUrl","params","setRequestHeader","contentType","onreadystatechange","readyState","data","responseText","JSON","parse","e","console","error","status","success","send","postData","stringify","returnedPromise","deferred","defer","resolvedResult","rejectedResult","window","Promise","_promiseProvider","_checkParamsAndPerformRequest","options","optionsAlwaysExtendParams","opt","cb","Constr","constructor","getGeneric","getMe","getMySavedTracks","addToMySavedTracks","trackIds","removeFromMySavedTracks","containsMySavedTracks","ids","join","getMySavedAlbums","addToMySavedAlbums","albumIds","removeFromMySavedAlbums","containsMySavedAlbums","getMyTopArtists","getMyTopTracks","getMyRecentlyPlayedTracks","followUsers","userIds","followArtists","artistIds","followPlaylist","playlistId","unfollowUsers","unfollowArtists","unfollowPlaylist","isFollowingUsers","isFollowingArtists","areFollowingPlaylist","getFollowedArtists","getUser","userId","getUserPlaylists","getPlaylist","getPlaylistTracks","getPlaylistCoverImage","createPlaylist","changePlaylistDetails","addTracksToPlaylist","uris","replaceTracksInPlaylist","reorderTracksInPlaylist","rangeStart","insertBefore","range_start","insert_before","removeTracksFromPlaylist","dataToBeSent","map","uri","tracks","removeTracksFromPlaylistWithSnapshotId","snapshotId","snapshot_id","removeTracksFromPlaylistInPositions","positions","uploadCustomPlaylistCoverImage","imageData","replace","getAlbum","albumId","getAlbumTracks","getAlbums","getTrack","trackId","getTracks","getArtist","artistId","getArtists","getArtistAlbums","getArtistTopTracks","countryId","country","getArtistRelatedArtists","getFeaturedPlaylists","getNewReleases","getCategories","getCategory","categoryId","getCategoryPlaylists","search","query","types","q","searchAlbums","this","searchArtists","searchTracks","searchPlaylists","searchShows","searchEpisodes","getAudioFeaturesForTrack","getAudioFeaturesForTracks","getAudioAnalysisForTrack","getRecommendations","getAvailableGenreSeeds","getMyDevices","getMyCurrentPlaybackState","getMyCurrentPlayingTrack","transferMyPlayback","deviceIds","device_ids","play","device_id","field","pause","skipToNext","skipToPrevious","seek","position_ms","setRepeat","state","setVolume","volume_percent","setShuffle","getShow","showId","getShows","showIds","getMySavedShows","addToMySavedShows","removeFromMySavedShows","containsMySavedShows","getShowEpisodes","getEpisode","episodeId","getEpisodes","episodeIds","getAccessToken","setAccessToken","accessToken","setPromiseImplementation","PromiseImplementation","valid","p","then","catch","Error","module","exports","Navigation","props","className","role","aria-label","Landing","href","Footer","NavigationLinks","to","PageContainer","children","percentColor","createContext","isLoggedIn","access_token","refresh_token","login","logout","percentage","Math","floor","cos","PI","JourneyRow","popularity","track","trackObject","src","album","images","alt","name","artists","milliseconds","seconds","minutes","msToNormal","duration_ms","style","fontSize","backgroundColor","energy","round","valence","pow","played_at","JourneyTable","final_tracks","recent_tracks","log","trackObj","index","Spotify","fetchRecents","a","limit","returnobj","items","err","getTrackFeatures","track_ids","audio_features","getJourneyData","res","recentsData","id","feat","finalData","obj","idx","getUsername","display_name","Journey","document","cookie","includes","split","useState","username","setUsername","setData","init","u","d","useEffect","App","routes","find","row","startsWith","path","exact","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.bf1fdcea.chunk.js","sourcesContent":["/* global module */\n'use strict';\n\n/**\n * Class representing the API\n */\nvar SpotifyWebApi = (function () {\n  var _baseUri = 'https://api.spotify.com/v1';\n  var _accessToken = null;\n  var _promiseImplementation = null;\n\n  var WrapPromiseWithAbort = function (promise, onAbort) {\n    promise.abort = onAbort;\n    return promise;\n  };\n\n  var _promiseProvider = function (promiseFunction, onAbort) {\n    var returnedPromise;\n    if (_promiseImplementation !== null) {\n      var deferred = _promiseImplementation.defer();\n      promiseFunction(\n        function (resolvedResult) {\n          deferred.resolve(resolvedResult);\n        },\n        function (rejectedResult) {\n          deferred.reject(rejectedResult);\n        }\n      );\n      returnedPromise = deferred.promise;\n    } else {\n      if (window.Promise) {\n        returnedPromise = new window.Promise(promiseFunction);\n      }\n    }\n\n    if (returnedPromise) {\n      return new WrapPromiseWithAbort(returnedPromise, onAbort);\n    } else {\n      return null;\n    }\n  };\n\n  var _extend = function () {\n    var args = Array.prototype.slice.call(arguments);\n    var target = args[0];\n    var objects = args.slice(1);\n    target = target || {};\n    objects.forEach(function (object) {\n      for (var j in object) {\n        if (object.hasOwnProperty(j)) {\n          target[j] = object[j];\n        }\n      }\n    });\n    return target;\n  };\n\n  var _buildUrl = function (url, parameters) {\n    var qs = '';\n    for (var key in parameters) {\n      if (parameters.hasOwnProperty(key)) {\n        var value = parameters[key];\n        qs += encodeURIComponent(key) + '=' + encodeURIComponent(value) + '&';\n      }\n    }\n    if (qs.length > 0) {\n      // chop off last '&'\n      qs = qs.substring(0, qs.length - 1);\n      url = url + '?' + qs;\n    }\n    return url;\n  };\n\n  var _performRequest = function (requestData, callback) {\n    var req = new XMLHttpRequest();\n\n    var promiseFunction = function (resolve, reject) {\n      function success(data) {\n        if (resolve) {\n          resolve(data);\n        }\n        if (callback) {\n          callback(null, data);\n        }\n      }\n\n      function failure() {\n        if (reject) {\n          reject(req);\n        }\n        if (callback) {\n          callback(req, null);\n        }\n      }\n\n      var type = requestData.type || 'GET';\n      req.open(type, _buildUrl(requestData.url, requestData.params));\n      if (_accessToken) {\n        req.setRequestHeader('Authorization', 'Bearer ' + _accessToken);\n      }\n      if (requestData.contentType) {\n        req.setRequestHeader('Content-Type', requestData.contentType);\n      }\n\n      req.onreadystatechange = function () {\n        if (req.readyState === 4) {\n          var data = null;\n          try {\n            data = req.responseText ? JSON.parse(req.responseText) : '';\n          } catch (e) {\n            console.error(e);\n          }\n\n          if (req.status >= 200 && req.status < 300) {\n            success(data);\n          } else {\n            failure();\n          }\n        }\n      };\n\n      if (type === 'GET') {\n        req.send(null);\n      } else {\n        var postData = null;\n        if (requestData.postData) {\n          postData =\n            requestData.contentType === 'image/jpeg'\n              ? requestData.postData\n              : JSON.stringify(requestData.postData);\n        }\n        req.send(postData);\n      }\n    };\n\n    if (callback) {\n      promiseFunction();\n      return null;\n    } else {\n      return _promiseProvider(promiseFunction, function () {\n        req.abort();\n      });\n    }\n  };\n\n  var _checkParamsAndPerformRequest = function (\n    requestData,\n    options,\n    callback,\n    optionsAlwaysExtendParams\n  ) {\n    var opt = {};\n    var cb = null;\n\n    if (typeof options === 'object') {\n      opt = options;\n      cb = callback;\n    } else if (typeof options === 'function') {\n      cb = options;\n    }\n\n    // options extend postData, if any. Otherwise they extend parameters sent in the url\n    var type = requestData.type || 'GET';\n    if (type !== 'GET' && requestData.postData && !optionsAlwaysExtendParams) {\n      requestData.postData = _extend(requestData.postData, opt);\n    } else {\n      requestData.params = _extend(requestData.params, opt);\n    }\n    return _performRequest(requestData, cb);\n  };\n\n  /**\n   * Creates an instance of the wrapper\n   * @constructor\n   */\n  var Constr = function () {};\n\n  Constr.prototype = {\n    constructor: SpotifyWebApi\n  };\n\n  /**\n   * Fetches a resource through a generic GET request.\n   *\n   * @param {string} url The URL to be fetched\n   * @param {function(Object,Object)} callback An optional callback\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getGeneric = function (url, callback) {\n    var requestData = {\n      url: url\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n\n  /**\n   * Fetches information about the current user.\n   * See [Get Current User's Profile](https://developer.spotify.com/web-api/get-current-users-profile/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMe = function (options, callback) {\n    var requestData = {\n      url: _baseUri + '/me'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches current user's saved tracks.\n   * See [Get Current User's Saved Tracks](https://developer.spotify.com/web-api/get-users-saved-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMySavedTracks = function (options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/tracks'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Adds a list of tracks to the current user's saved tracks.\n   * See [Save Tracks for Current User](https://developer.spotify.com/web-api/save-tracks-user/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} trackIds The ids of the tracks. If you know their Spotify URI it is easy\n   * to find their track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.addToMySavedTracks = function (trackIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/tracks',\n      type: 'PUT',\n      postData: trackIds\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Remove a list of tracks from the current user's saved tracks.\n   * See [Remove Tracks for Current User](https://developer.spotify.com/web-api/remove-tracks-user/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} trackIds The ids of the tracks. If you know their Spotify URI it is easy\n   * to find their track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.removeFromMySavedTracks = function (\n    trackIds,\n    options,\n    callback\n  ) {\n    var requestData = {\n      url: _baseUri + '/me/tracks',\n      type: 'DELETE',\n      postData: trackIds\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Checks if the current user's saved tracks contains a certain list of tracks.\n   * See [Check Current User's Saved Tracks](https://developer.spotify.com/web-api/check-users-saved-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} trackIds The ids of the tracks. If you know their Spotify URI it is easy\n   * to find their track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.containsMySavedTracks = function (\n    trackIds,\n    options,\n    callback\n  ) {\n    var requestData = {\n      url: _baseUri + '/me/tracks/contains',\n      params: { ids: trackIds.join(',') }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Get a list of the albums saved in the current Spotify user's \"Your Music\" library.\n   * See [Get Current User's Saved Albums](https://developer.spotify.com/web-api/get-users-saved-albums/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMySavedAlbums = function (options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/albums'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Save one or more albums to the current user's \"Your Music\" library.\n   * See [Save Albums for Current User](https://developer.spotify.com/web-api/save-albums-user/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} albumIds The ids of the albums. If you know their Spotify URI, it is easy\n   * to find their album id (e.g. spotify:album:<here_is_the_album_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.addToMySavedAlbums = function (albumIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/albums',\n      type: 'PUT',\n      postData: albumIds\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Remove one or more albums from the current user's \"Your Music\" library.\n   * See [Remove Albums for Current User](https://developer.spotify.com/web-api/remove-albums-user/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} albumIds The ids of the albums. If you know their Spotify URI, it is easy\n   * to find their album id (e.g. spotify:album:<here_is_the_album_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.removeFromMySavedAlbums = function (\n    albumIds,\n    options,\n    callback\n  ) {\n    var requestData = {\n      url: _baseUri + '/me/albums',\n      type: 'DELETE',\n      postData: albumIds\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Check if one or more albums is already saved in the current Spotify user's \"Your Music\" library.\n   * See [Check User's Saved Albums](https://developer.spotify.com/web-api/check-users-saved-albums/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} albumIds The ids of the albums. If you know their Spotify URI, it is easy\n   * to find their album id (e.g. spotify:album:<here_is_the_album_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.containsMySavedAlbums = function (\n    albumIds,\n    options,\n    callback\n  ) {\n    var requestData = {\n      url: _baseUri + '/me/albums/contains',\n      params: { ids: albumIds.join(',') }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Get the current user’s top artists based on calculated affinity.\n   * See [Get a User’s Top Artists](https://developer.spotify.com/web-api/get-users-top-artists-and-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMyTopArtists = function (options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/top/artists'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Get the current user’s top tracks based on calculated affinity.\n   * See [Get a User’s Top Tracks](https://developer.spotify.com/web-api/get-users-top-artists-and-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMyTopTracks = function (options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/top/tracks'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Get tracks from the current user’s recently played tracks.\n   * See [Get Current User’s Recently Played Tracks](https://developer.spotify.com/web-api/web-api-personalization-endpoints/get-recently-played/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMyRecentlyPlayedTracks = function (options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/player/recently-played'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Adds the current user as a follower of one or more other Spotify users.\n   * See [Follow Artists or Users](https://developer.spotify.com/web-api/follow-artists-users/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} userIds The ids of the users. If you know their Spotify URI it is easy\n   * to find their user id (e.g. spotify:user:<here_is_the_user_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an empty value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.followUsers = function (userIds, callback) {\n    var requestData = {\n      url: _baseUri + '/me/following/',\n      type: 'PUT',\n      params: {\n        ids: userIds.join(','),\n        type: 'user'\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n\n  /**\n   * Adds the current user as a follower of one or more artists.\n   * See [Follow Artists or Users](https://developer.spotify.com/web-api/follow-artists-users/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} artistIds The ids of the artists. If you know their Spotify URI it is easy\n   * to find their artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an empty value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.followArtists = function (artistIds, callback) {\n    var requestData = {\n      url: _baseUri + '/me/following/',\n      type: 'PUT',\n      params: {\n        ids: artistIds.join(','),\n        type: 'artist'\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n\n  /**\n   * Add the current user as a follower of one playlist.\n   * See [Follow a Playlist](https://developer.spotify.com/web-api/follow-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Object} options A JSON object with options that can be passed. For instance,\n   * whether you want the playlist to be followed privately ({public: false})\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an empty value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.followPlaylist = function (playlistId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/followers',\n      type: 'PUT',\n      postData: {}\n    };\n\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Removes the current user as a follower of one or more other Spotify users.\n   * See [Unfollow Artists or Users](https://developer.spotify.com/web-api/unfollow-artists-users/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} userIds The ids of the users. If you know their Spotify URI it is easy\n   * to find their user id (e.g. spotify:user:<here_is_the_user_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an empty value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.unfollowUsers = function (userIds, callback) {\n    var requestData = {\n      url: _baseUri + '/me/following/',\n      type: 'DELETE',\n      params: {\n        ids: userIds.join(','),\n        type: 'user'\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n\n  /**\n   * Removes the current user as a follower of one or more artists.\n   * See [Unfollow Artists or Users](https://developer.spotify.com/web-api/unfollow-artists-users/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} artistIds The ids of the artists. If you know their Spotify URI it is easy\n   * to find their artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an empty value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.unfollowArtists = function (artistIds, callback) {\n    var requestData = {\n      url: _baseUri + '/me/following/',\n      type: 'DELETE',\n      params: {\n        ids: artistIds.join(','),\n        type: 'artist'\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n\n  /**\n   * Remove the current user as a follower of one playlist.\n   * See [Unfollow a Playlist](https://developer.spotify.com/web-api/unfollow-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an empty value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.unfollowPlaylist = function (playlistId, callback) {\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/followers',\n      type: 'DELETE'\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n\n  /**\n   * Checks to see if the current user is following one or more other Spotify users.\n   * See [Check if Current User Follows Users or Artists](https://developer.spotify.com/web-api/check-current-user-follows/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} userIds The ids of the users. If you know their Spotify URI it is easy\n   * to find their user id (e.g. spotify:user:<here_is_the_user_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an array of boolean values that indicate\n   * whether the user is following the users sent in the request.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.isFollowingUsers = function (userIds, callback) {\n    var requestData = {\n      url: _baseUri + '/me/following/contains',\n      type: 'GET',\n      params: {\n        ids: userIds.join(','),\n        type: 'user'\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n\n  /**\n   * Checks to see if the current user is following one or more artists.\n   * See [Check if Current User Follows](https://developer.spotify.com/web-api/check-current-user-follows/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} artistIds The ids of the artists. If you know their Spotify URI it is easy\n   * to find their artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an array of boolean values that indicate\n   * whether the user is following the artists sent in the request.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.isFollowingArtists = function (artistIds, callback) {\n    var requestData = {\n      url: _baseUri + '/me/following/contains',\n      type: 'GET',\n      params: {\n        ids: artistIds.join(','),\n        type: 'artist'\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n\n  /**\n   * Check to see if one or more Spotify users are following a specified playlist.\n   * See [Check if Users Follow a Playlist](https://developer.spotify.com/web-api/check-user-following-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Array<string>} userIds The ids of the users. If you know their Spotify URI it is easy\n   * to find their user id (e.g. spotify:user:<here_is_the_user_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an array of boolean values that indicate\n   * whether the users are following the playlist sent in the request.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.areFollowingPlaylist = function (\n    playlistId,\n    userIds,\n    callback\n  ) {\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/followers/contains',\n      type: 'GET',\n      params: {\n        ids: userIds.join(',')\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n\n  /**\n   * Get the current user's followed artists.\n   * See [Get User's Followed Artists](https://developer.spotify.com/web-api/get-followed-artists/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} [options] Options, being after and limit.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an object with a paged object containing\n   * artists.\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing a paging object which contains\n   * artists objects. Not returned if a callback is given.\n   */\n  Constr.prototype.getFollowedArtists = function (options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/following',\n      type: 'GET',\n      params: {\n        type: 'artist'\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches information about a specific user.\n   * See [Get a User's Profile](https://developer.spotify.com/web-api/get-users-profile/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} userId The id of the user. If you know the Spotify URI it is easy\n   * to find the id (e.g. spotify:user:<here_is_the_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getUser = function (userId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/users/' + encodeURIComponent(userId)\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches a list of the current user's playlists.\n   * See [Get a List of a User's Playlists](https://developer.spotify.com/web-api/get-list-users-playlists/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} userId An optional id of the user. If you know the Spotify URI it is easy\n   * to find the id (e.g. spotify:user:<here_is_the_id>). If not provided, the id of the user that granted\n   * the permissions will be used.\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getUserPlaylists = function (userId, options, callback) {\n    var requestData;\n    if (typeof userId === 'string') {\n      requestData = {\n        url: _baseUri + '/users/' + encodeURIComponent(userId) + '/playlists'\n      };\n    } else {\n      requestData = {\n        url: _baseUri + '/me/playlists'\n      };\n      callback = options;\n      options = userId;\n    }\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches a specific playlist.\n   * See [Get a Playlist](https://developer.spotify.com/web-api/get-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getPlaylist = function (playlistId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches the tracks from a specific playlist.\n   * See [Get a Playlist's Tracks](https://developer.spotify.com/web-api/get-playlists-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getPlaylistTracks = function (\n    playlistId,\n    options,\n    callback\n  ) {\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/tracks'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Gets the current image associated with a specific playlist.\n   * See [Get a Playlist Cover Image](https://developer.spotify.com/documentation/web-api/reference/playlists/get-playlist-cover/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:playlist:<here_is_the_playlist_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getPlaylistCoverImage = function (playlistId, callback) {\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/images'\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n\n  /**\n   * Creates a playlist and stores it in the current user's library.\n   * See [Create a Playlist](https://developer.spotify.com/web-api/create-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} userId The id of the user. If you know the Spotify URI it is easy\n   * to find the id (e.g. spotify:user:<here_is_the_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.createPlaylist = function (userId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/users/' + encodeURIComponent(userId) + '/playlists',\n      type: 'POST',\n      postData: options\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Change a playlist's name and public/private state\n   * See [Change a Playlist's Details](https://developer.spotify.com/web-api/change-playlist-details/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Object} data A JSON object with the data to update. E.g. {name: 'A new name', public: true}\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.changePlaylistDetails = function (\n    playlistId,\n    data,\n    callback\n  ) {\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId,\n      type: 'PUT',\n      postData: data\n    };\n    return _checkParamsAndPerformRequest(requestData, data, callback);\n  };\n\n  /**\n   * Add tracks to a playlist.\n   * See [Add Tracks to a Playlist](https://developer.spotify.com/web-api/add-tracks-to-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Array<string>} uris An array of Spotify URIs for the tracks\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.addTracksToPlaylist = function (\n    playlistId,\n    uris,\n    options,\n    callback\n  ) {\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/tracks',\n      type: 'POST',\n      postData: {\n        uris: uris\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback, true);\n  };\n\n  /**\n   * Replace the tracks of a playlist\n   * See [Replace a Playlist's Tracks](https://developer.spotify.com/web-api/replace-playlists-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Array<string>} uris An array of Spotify URIs for the tracks\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.replaceTracksInPlaylist = function (\n    playlistId,\n    uris,\n    callback\n  ) {\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/tracks',\n      type: 'PUT',\n      postData: { uris: uris }\n    };\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Reorder tracks in a playlist\n   * See [Reorder a Playlist’s Tracks](https://developer.spotify.com/web-api/reorder-playlists-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {number} rangeStart The position of the first track to be reordered.\n   * @param {number} insertBefore The position where the tracks should be inserted. To reorder the tracks to\n   * the end of the playlist, simply set insert_before to the position after the last track.\n   * @param {Object} options An object with optional parameters (range_length, snapshot_id)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.reorderTracksInPlaylist = function (\n    playlistId,\n    rangeStart,\n    insertBefore,\n    options,\n    callback\n  ) {\n    /* eslint-disable camelcase */\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/tracks',\n      type: 'PUT',\n      postData: {\n        range_start: rangeStart,\n        insert_before: insertBefore\n      }\n    };\n    /* eslint-enable camelcase */\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Remove tracks from a playlist\n   * See [Remove Tracks from a Playlist](https://developer.spotify.com/web-api/remove-tracks-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Array<Object>} uris An array of tracks to be removed. Each element of the array can be either a\n   * string, in which case it is treated as a URI, or an object containing the properties `uri` (which is a\n   * string) and `positions` (which is an array of integers).\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.removeTracksFromPlaylist = function (\n    playlistId,\n    uris,\n    callback\n  ) {\n    var dataToBeSent = uris.map(function (uri) {\n      if (typeof uri === 'string') {\n        return { uri: uri };\n      } else {\n        return uri;\n      }\n    });\n\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/tracks',\n      type: 'DELETE',\n      postData: { tracks: dataToBeSent }\n    };\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Remove tracks from a playlist, specifying a snapshot id.\n   * See [Remove Tracks from a Playlist](https://developer.spotify.com/web-api/remove-tracks-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Array<Object>} uris An array of tracks to be removed. Each element of the array can be either a\n   * string, in which case it is treated as a URI, or an object containing the properties `uri` (which is a\n   * string) and `positions` (which is an array of integers).\n   * @param {string} snapshotId The playlist's snapshot ID against which you want to make the changes\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.removeTracksFromPlaylistWithSnapshotId = function (\n    playlistId,\n    uris,\n    snapshotId,\n    callback\n  ) {\n    var dataToBeSent = uris.map(function (uri) {\n      if (typeof uri === 'string') {\n        return { uri: uri };\n      } else {\n        return uri;\n      }\n    });\n    /* eslint-disable camelcase */\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/tracks',\n      type: 'DELETE',\n      postData: {\n        tracks: dataToBeSent,\n        snapshot_id: snapshotId\n      }\n    };\n    /* eslint-enable camelcase */\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Remove tracks from a playlist, specifying the positions of the tracks to be removed.\n   * See [Remove Tracks from a Playlist](https://developer.spotify.com/web-api/remove-tracks-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Array<number>} positions array of integers containing the positions of the tracks to remove\n   * from the playlist.\n   * @param {string} snapshotId The playlist's snapshot ID against which you want to make the changes\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.removeTracksFromPlaylistInPositions = function (\n    playlistId,\n    positions,\n    snapshotId,\n    callback\n  ) {\n    /* eslint-disable camelcase */\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/tracks',\n      type: 'DELETE',\n      postData: {\n        positions: positions,\n        snapshot_id: snapshotId\n      }\n    };\n    /* eslint-enable camelcase */\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Upload a custom playlist cover image.\n   * See [Upload A Custom Playlist Cover Image](https://developer.spotify.com/web-api/upload-a-custom-playlist-cover-image/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {string} imageData Base64 encoded JPEG image data, maximum payload size is 256 KB.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.uploadCustomPlaylistCoverImage = function (\n    playlistId,\n    imageData,\n    callback\n  ) {\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/images',\n      type: 'PUT',\n      postData: imageData.replace(/^data:image\\/jpeg;base64,/, ''),\n      contentType: 'image/jpeg'\n    };\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Fetches an album from the Spotify catalog.\n   * See [Get an Album](https://developer.spotify.com/web-api/get-album/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} albumId The id of the album. If you know the Spotify URI it is easy\n   * to find the album id (e.g. spotify:album:<here_is_the_album_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getAlbum = function (albumId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/albums/' + albumId\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches the tracks of an album from the Spotify catalog.\n   * See [Get an Album's Tracks](https://developer.spotify.com/web-api/get-albums-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} albumId The id of the album. If you know the Spotify URI it is easy\n   * to find the album id (e.g. spotify:album:<here_is_the_album_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getAlbumTracks = function (albumId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/albums/' + albumId + '/tracks'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches multiple albums from the Spotify catalog.\n   * See [Get Several Albums](https://developer.spotify.com/web-api/get-several-albums/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} albumIds The ids of the albums. If you know their Spotify URI it is easy\n   * to find their album id (e.g. spotify:album:<here_is_the_album_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getAlbums = function (albumIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/albums/',\n      params: { ids: albumIds.join(',') }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches a track from the Spotify catalog.\n   * See [Get a Track](https://developer.spotify.com/web-api/get-track/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} trackId The id of the track. If you know the Spotify URI it is easy\n   * to find the track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getTrack = function (trackId, options, callback) {\n    var requestData = {};\n    requestData.url = _baseUri + '/tracks/' + trackId;\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches multiple tracks from the Spotify catalog.\n   * See [Get Several Tracks](https://developer.spotify.com/web-api/get-several-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} trackIds The ids of the tracks. If you know their Spotify URI it is easy\n   * to find their track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getTracks = function (trackIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/tracks/',\n      params: { ids: trackIds.join(',') }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches an artist from the Spotify catalog.\n   * See [Get an Artist](https://developer.spotify.com/web-api/get-artist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} artistId The id of the artist. If you know the Spotify URI it is easy\n   * to find the artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getArtist = function (artistId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/artists/' + artistId\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches multiple artists from the Spotify catalog.\n   * See [Get Several Artists](https://developer.spotify.com/web-api/get-several-artists/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} artistIds The ids of the artists. If you know their Spotify URI it is easy\n   * to find their artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getArtists = function (artistIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/artists/',\n      params: { ids: artistIds.join(',') }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches the albums of an artist from the Spotify catalog.\n   * See [Get an Artist's Albums](https://developer.spotify.com/web-api/get-artists-albums/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} artistId The id of the artist. If you know the Spotify URI it is easy\n   * to find the artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getArtistAlbums = function (artistId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/artists/' + artistId + '/albums'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches a list of top tracks of an artist from the Spotify catalog, for a specific country.\n   * See [Get an Artist's Top Tracks](https://developer.spotify.com/web-api/get-artists-top-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} artistId The id of the artist. If you know the Spotify URI it is easy\n   * to find the artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {string} countryId The id of the country (e.g. ES for Spain or US for United States)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getArtistTopTracks = function (\n    artistId,\n    countryId,\n    options,\n    callback\n  ) {\n    var requestData = {\n      url: _baseUri + '/artists/' + artistId + '/top-tracks',\n      params: { country: countryId }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches a list of artists related with a given one from the Spotify catalog.\n   * See [Get an Artist's Related Artists](https://developer.spotify.com/web-api/get-related-artists/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} artistId The id of the artist. If you know the Spotify URI it is easy\n   * to find the artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getArtistRelatedArtists = function (\n    artistId,\n    options,\n    callback\n  ) {\n    var requestData = {\n      url: _baseUri + '/artists/' + artistId + '/related-artists'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches a list of Spotify featured playlists (shown, for example, on a Spotify player's \"Browse\" tab).\n   * See [Get a List of Featured Playlists](https://developer.spotify.com/web-api/get-list-featured-playlists/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getFeaturedPlaylists = function (options, callback) {\n    var requestData = {\n      url: _baseUri + '/browse/featured-playlists'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches a list of new album releases featured in Spotify (shown, for example, on a Spotify player's \"Browse\" tab).\n   * See [Get a List of New Releases](https://developer.spotify.com/web-api/get-list-new-releases/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getNewReleases = function (options, callback) {\n    var requestData = {\n      url: _baseUri + '/browse/new-releases'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Get a list of categories used to tag items in Spotify (on, for example, the Spotify player's \"Browse\" tab).\n   * See [Get a List of Categories](https://developer.spotify.com/web-api/get-list-categories/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getCategories = function (options, callback) {\n    var requestData = {\n      url: _baseUri + '/browse/categories'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Get a single category used to tag items in Spotify (on, for example, the Spotify player's \"Browse\" tab).\n   * See [Get a Category](https://developer.spotify.com/web-api/get-category/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} categoryId The id of the category. These can be found with the getCategories function\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getCategory = function (categoryId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/browse/categories/' + categoryId\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Get a list of Spotify playlists tagged with a particular category.\n   * See [Get a Category's Playlists](https://developer.spotify.com/web-api/get-categorys-playlists/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} categoryId The id of the category. These can be found with the getCategories function\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getCategoryPlaylists = function (\n    categoryId,\n    options,\n    callback\n  ) {\n    var requestData = {\n      url: _baseUri + '/browse/categories/' + categoryId + '/playlists'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Get Spotify catalog information about artists, albums, tracks or playlists that match a keyword string.\n   * See [Search for an Item](https://developer.spotify.com/web-api/search-item/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} query The search query\n   * @param {Array<string>} types An array of item types to search across.\n   * Valid types are: 'album', 'artist', 'playlist', and 'track'.\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.search = function (query, types, options, callback) {\n    var requestData = {\n      url: _baseUri + '/search/',\n      params: {\n        q: query,\n        type: types.join(',')\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches albums from the Spotify catalog according to a query.\n   * See [Search for an Item](https://developer.spotify.com/web-api/search-item/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} query The search query\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.searchAlbums = function (query, options, callback) {\n    return this.search(query, ['album'], options, callback);\n  };\n\n  /**\n   * Fetches artists from the Spotify catalog according to a query.\n   * See [Search for an Item](https://developer.spotify.com/web-api/search-item/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} query The search query\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.searchArtists = function (query, options, callback) {\n    return this.search(query, ['artist'], options, callback);\n  };\n\n  /**\n   * Fetches tracks from the Spotify catalog according to a query.\n   * See [Search for an Item](https://developer.spotify.com/web-api/search-item/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} query The search query\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.searchTracks = function (query, options, callback) {\n    return this.search(query, ['track'], options, callback);\n  };\n\n  /**\n   * Fetches playlists from the Spotify catalog according to a query.\n   * See [Search for an Item](https://developer.spotify.com/web-api/search-item/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} query The search query\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.searchPlaylists = function (query, options, callback) {\n    return this.search(query, ['playlist'], options, callback);\n  };\n\n  /**\n   * Fetches shows from the Spotify catalog according to a query.\n   * See [Search for an Item](https://developer.spotify.com/web-api/search-item/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} query The search query\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.searchShows = function (query, options, callback) {\n    return this.search(query, ['show'], options, callback);\n  };\n\n  /**\n   * Fetches episodes from the Spotify catalog according to a query.\n   * See [Search for an Item](https://developer.spotify.com/web-api/search-item/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} query The search query\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.searchEpisodes = function (query, options, callback) {\n    return this.search(query, ['episode'], options, callback);\n  };\n\n  /**\n   * Get audio features for a single track identified by its unique Spotify ID.\n   * See [Get Audio Features for a Track](https://developer.spotify.com/web-api/get-audio-features/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} trackId The id of the track. If you know the Spotify URI it is easy\n   * to find the track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getAudioFeaturesForTrack = function (trackId, callback) {\n    var requestData = {};\n    requestData.url = _baseUri + '/audio-features/' + trackId;\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Get audio features for multiple tracks based on their Spotify IDs.\n   * See [Get Audio Features for Several Tracks](https://developer.spotify.com/web-api/get-several-audio-features/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} trackIds The ids of the tracks. If you know their Spotify URI it is easy\n   * to find their track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getAudioFeaturesForTracks = function (trackIds, callback) {\n    var requestData = {\n      url: _baseUri + '/audio-features',\n      params: { ids: trackIds }\n    };\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Get audio analysis for a single track identified by its unique Spotify ID.\n   * See [Get Audio Analysis for a Track](https://developer.spotify.com/web-api/get-audio-analysis/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} trackId The id of the track. If you know the Spotify URI it is easy\n   * to find the track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getAudioAnalysisForTrack = function (trackId, callback) {\n    var requestData = {};\n    requestData.url = _baseUri + '/audio-analysis/' + trackId;\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Create a playlist-style listening experience based on seed artists, tracks and genres.\n   * See [Get Recommendations Based on Seeds](https://developer.spotify.com/web-api/get-recommendations/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getRecommendations = function (options, callback) {\n    var requestData = {\n      url: _baseUri + '/recommendations'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Retrieve a list of available genres seed parameter values for recommendations.\n   * See [Available Genre Seeds](https://developer.spotify.com/web-api/get-recommendations/#available-genre-seeds) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getAvailableGenreSeeds = function (callback) {\n    var requestData = {\n      url: _baseUri + '/recommendations/available-genre-seeds'\n    };\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Get information about a user’s available devices.\n   * See [Get a User’s Available Devices](https://developer.spotify.com/web-api/get-a-users-available-devices/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMyDevices = function (callback) {\n    var requestData = {\n      url: _baseUri + '/me/player/devices'\n    };\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Get information about the user’s current playback state, including track, track progress, and active device.\n   * See [Get Information About The User’s Current Playback](https://developer.spotify.com/web-api/get-information-about-the-users-current-playback/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMyCurrentPlaybackState = function (options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/player'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Get the object currently being played on the user’s Spotify account.\n   * See [Get the User’s Currently Playing Track](https://developer.spotify.com/web-api/get-the-users-currently-playing-track/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMyCurrentPlayingTrack = function (options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/player/currently-playing'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Transfer playback to a new device and determine if it should start playing.\n   * See [Transfer a User’s Playback](https://developer.spotify.com/web-api/transfer-a-users-playback/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} deviceIds A JSON array containing the ID of the device on which playback should be started/transferred.\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.transferMyPlayback = function (\n    deviceIds,\n    options,\n    callback\n  ) {\n    var postData = options || {};\n    postData.device_ids = deviceIds;\n    var requestData = {\n      type: 'PUT',\n      url: _baseUri + '/me/player',\n      postData: postData\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Start a new context or resume current playback on the user’s active device.\n   * See [Start/Resume a User’s Playback](https://developer.spotify.com/web-api/start-a-users-playback/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.play = function (options, callback) {\n    options = options || {};\n    var params =\n      'device_id' in options ? { device_id: options.device_id } : null;\n    var postData = {};\n    ['context_uri', 'uris', 'offset', 'position_ms'].forEach(function (field) {\n      if (field in options) {\n        postData[field] = options[field];\n      }\n    });\n    var requestData = {\n      type: 'PUT',\n      url: _baseUri + '/me/player/play',\n      params: params,\n      postData: postData\n    };\n\n    // need to clear options so it doesn't add all of them to the query params\n    var newOptions = typeof options === 'function' ? options : {};\n    return _checkParamsAndPerformRequest(requestData, newOptions, callback);\n  };\n\n  /**\n   * Pause playback on the user’s account.\n   * See [Pause a User’s Playback](https://developer.spotify.com/web-api/pause-a-users-playback/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.pause = function (options, callback) {\n    options = options || {};\n    var params =\n      'device_id' in options ? { device_id: options.device_id } : null;\n    var requestData = {\n      type: 'PUT',\n      url: _baseUri + '/me/player/pause',\n      params: params\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Skips to next track in the user’s queue.\n   * See [Skip User’s Playback To Next Track](https://developer.spotify.com/web-api/skip-users-playback-to-next-track/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.skipToNext = function (options, callback) {\n    options = options || {};\n    var params =\n      'device_id' in options ? { device_id: options.device_id } : null;\n    var requestData = {\n      type: 'POST',\n      url: _baseUri + '/me/player/next',\n      params: params\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Skips to previous track in the user’s queue.\n   * Note that this will ALWAYS skip to the previous track, regardless of the current track’s progress.\n   * Returning to the start of the current track should be performed using `.seek()`\n   * See [Skip User’s Playback To Previous Track](https://developer.spotify.com/web-api/skip-users-playback-to-next-track/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.skipToPrevious = function (options, callback) {\n    options = options || {};\n    var params =\n      'device_id' in options ? { device_id: options.device_id } : null;\n    var requestData = {\n      type: 'POST',\n      url: _baseUri + '/me/player/previous',\n      params: params\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Seeks to the given position in the user’s currently playing track.\n   * See [Seek To Position In Currently Playing Track](https://developer.spotify.com/web-api/seek-to-position-in-currently-playing-track/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {number} position_ms The position in milliseconds to seek to. Must be a positive number.\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.seek = function (position_ms, options, callback) {\n    options = options || {};\n    var params = {\n      position_ms: position_ms\n    };\n    if ('device_id' in options) {\n      params.device_id = options.device_id;\n    }\n    var requestData = {\n      type: 'PUT',\n      url: _baseUri + '/me/player/seek',\n      params: params\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Set the repeat mode for the user’s playback. Options are repeat-track, repeat-context, and off.\n   * See [Set Repeat Mode On User’s Playback](https://developer.spotify.com/web-api/set-repeat-mode-on-users-playback/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {String} state A string set to 'track', 'context' or 'off'.\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.setRepeat = function (state, options, callback) {\n    options = options || {};\n    var params = {\n      state: state\n    };\n    if ('device_id' in options) {\n      params.device_id = options.device_id;\n    }\n    var requestData = {\n      type: 'PUT',\n      url: _baseUri + '/me/player/repeat',\n      params: params\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Set the volume for the user’s current playback device.\n   * See [Set Volume For User’s Playback](https://developer.spotify.com/web-api/set-volume-for-users-playback/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {number} volume_percent The volume to set. Must be a value from 0 to 100 inclusive.\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.setVolume = function (volume_percent, options, callback) {\n    options = options || {};\n    var params = {\n      volume_percent: volume_percent\n    };\n    if ('device_id' in options) {\n      params.device_id = options.device_id;\n    }\n    var requestData = {\n      type: 'PUT',\n      url: _baseUri + '/me/player/volume',\n      params: params\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Toggle shuffle on or off for user’s playback.\n   * See [Toggle Shuffle For User’s Playback](https://developer.spotify.com/web-api/toggle-shuffle-for-users-playback/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {bool} state Whether or not to shuffle user's playback.\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.setShuffle = function (state, options, callback) {\n    options = options || {};\n    var params = {\n      state: state\n    };\n    if ('device_id' in options) {\n      params.device_id = options.device_id;\n    }\n    var requestData = {\n      type: 'PUT',\n      url: _baseUri + '/me/player/shuffle',\n      params: params\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches a show from the Spotify catalog.\n   * See [Get a Show](https://developer.spotify.com/documentation/web-api/reference/shows/get-a-show/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} showId The id of the show. If you know the Spotify URI it is easy\n   * to find the show id (e.g. spotify:show:<here_is_the_show_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getShow = function (showId, options, callback) {\n    var requestData = {};\n    requestData.url = _baseUri + '/shows/' + showId;\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches multiple shows from the Spotify catalog.\n   * See [Get Several Shows](https://developer.spotify.com/documentation/web-api/reference/shows/get-several-shows/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} showIds The ids of the shows. If you know their Spotify URI it is easy\n   * to find their show id (e.g. spotify:show:<here_is_the_show_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getShows = function (showIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/shows/',\n      params: { ids: showIds.join(',') }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches current user's saved shows.\n   * See [Get Current User's Saved Shows](https://developer.spotify.com/documentation/web-api/reference/library/get-users-saved-shows/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMySavedShows = function (options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/shows'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Adds a list of shows to the current user's saved shows.\n   * See [Save Shows for Current User](https://developer.spotify.com/documentation/web-api/reference/library/save-shows-user/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} showIds The ids of the shows. If you know their Spotify URI it is easy\n   * to find their show id (e.g. spotify:show:<here_is_the_show_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.addToMySavedShows = function (showIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/shows',\n      type: 'PUT',\n      postData: showIds\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Remove a list of shows from the current user's saved shows.\n   * See [Remove Shows for Current User](https://developer.spotify.com/documentation/web-api/reference/library/remove-shows-user/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} showIds The ids of the shows. If you know their Spotify URI it is easy\n   * to find their show id (e.g. spotify:show:<here_is_the_show_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.removeFromMySavedShows = function (\n    showIds,\n    options,\n    callback\n  ) {\n    var requestData = {\n      url: _baseUri + '/me/shows',\n      type: 'DELETE',\n      postData: showIds\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Checks if the current user's saved shows contains a certain list of shows.\n   * See [Check Current User's Saved Shows](https://developer.spotify.com/documentation/web-api/reference/library/check-users-saved-shows/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} showIds The ids of the shows. If you know their Spotify URI it is easy\n   * to find their show id (e.g. spotify:show:<here_is_the_show_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.containsMySavedShows = function (\n    showIds,\n    options,\n    callback\n  ) {\n    var requestData = {\n      url: _baseUri + '/me/shows/contains',\n      params: { ids: showIds.join(',') }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches the episodes of a show from the Spotify catalog.\n   * See [Get a Show's Episodes](https://developer.spotify.com/documentation/web-api/reference/shows/get-shows-episodes/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} showId The id of the show. If you know the Spotify URI it is easy\n   * to find the show id (e.g. spotify:show:<here_is_the_show_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getShowEpisodes = function (showId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/shows/' + showId + '/episodes'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches an episode from the Spotify catalog.\n   * See [Get an Episode](https://developer.spotify.com/documentation/web-api/reference/episodes/get-an-episode/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} episodeId The id of the episode. If you know the Spotify URI it is easy\n   * to find the episode id (e.g. spotify:episode:<here_is_the_episode_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getEpisode = function (episodeId, options, callback) {\n    var requestData = {};\n    requestData.url = _baseUri + '/episodes/' + episodeId;\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches multiple episodes from the Spotify catalog.\n   * See [Get Several Episodes](https://developer.spotify.com/documentation/web-api/reference/episodes/get-several-episodes/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} episodeIds The ids of the episodes. If you know their Spotify URI it is easy\n   * to find their episode id (e.g. spotify:episode:<here_is_the_episode_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getEpisodes = function (episodeIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/episodes/',\n      params: { ids: episodeIds.join(',') }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Gets the access token in use.\n   *\n   * @return {string} accessToken The access token\n   */\n  Constr.prototype.getAccessToken = function () {\n    return _accessToken;\n  };\n\n  /**\n   * Sets the access token to be used.\n   * See [the Authorization Guide](https://developer.spotify.com/web-api/authorization-guide/) on\n   * the Spotify Developer site for more information about obtaining an access token.\n   *\n   * @param {string} accessToken The access token\n   * @return {void}\n   */\n  Constr.prototype.setAccessToken = function (accessToken) {\n    _accessToken = accessToken;\n  };\n\n  /**\n   * Sets an implementation of Promises/A+ to be used. E.g. Q, when.\n   * See [Conformant Implementations](https://github.com/promises-aplus/promises-spec/blob/master/implementations.md)\n   * for a list of some available options\n   *\n   * @param {Object} PromiseImplementation A Promises/A+ valid implementation\n   * @throws {Error} If the implementation being set doesn't conform with Promises/A+\n   * @return {void}\n   */\n  Constr.prototype.setPromiseImplementation = function (PromiseImplementation) {\n    var valid = false;\n    try {\n      var p = new PromiseImplementation(function (resolve) {\n        resolve();\n      });\n      if (typeof p.then === 'function' && typeof p.catch === 'function') {\n        valid = true;\n      }\n    } catch (e) {\n      console.error(e);\n    }\n    if (valid) {\n      _promiseImplementation = PromiseImplementation;\n    } else {\n      throw new Error('Unsupported implementation of Promises/A+');\n    }\n  };\n\n  return Constr;\n})();\n\nif (typeof module === 'object' && typeof module.exports === 'object') {\n  module.exports = SpotifyWebApi;\n}\n","import React from 'react'\n\nimport './Navigation.css';\n\nconst Navigation = props => {\n\treturn (\n\t\t<header className=\"navigation\">\n\t\t\t<span className=\"navigation-title\">\n\t\t\t\tmySoundJourney\n\t\t\t</span>\n\n\t\t\t<span className=\"navigation-shoutout\">\n\t\t\t\tpowered <span role=\"img\" aria-label=\"!\">💪🏽</span> by Spotify® API\n\t\t\t</span>\n\t\t</header>\n\t);\n}\n\nexport default Navigation;","import React from 'react';\n\nimport './Landing.css'\n\nconst Landing = props => {\n    return(\n        <div className=\"auth-container\">\n            <h2 className=\"auth-container__description\">Get started by authorizing yourself with Spotify</h2>\n            <a className=\"auth-container__button\" href=\"http://localhost:8888/auth/login\">CONNECT TO SPOTIFY</a>\n        </div>\n    );\n}\n\nexport default Landing;","import React from 'react'\n\nimport './Footer.css';\n\nconst Footer = props => {\n\treturn (\n\t\t<footer className=\"main-footer\">\n\t\t\t<span className=\"main-footer-author\">\n\t\t\t\t© 2020 Sanjay Alwani\n\t\t\t</span>\n\t\t\t<span className=\"main-footer-nav\">\n\t\t\t\t<span>About</span>\n\t\t\t\t<span>Feedback</span>\n\t\t\t</span>\n\t\t</footer>\n\t);\n}\n\nexport default Footer;","import React from 'react'\nimport { NavLink } from 'react-router-dom'\n\nimport './NavigationLinks.css';\n\nconst NavigationLinks = props => {\n    return  (\n        <ul className=\"navigation-links\">\n            <li>\n                <NavLink to=\"/journey\">JOURNEY</NavLink>\n            </li>\n            {/*<li>\n                <NavLink to=\"/top\">TOP 50</NavLink>\n            </li>\n            <li>\n                <NavLink to=\"/saved\">SAVED</NavLink>\n            </li>*/}\n        </ul>\n    );\n}\n\nexport default NavigationLinks;","import React from 'react';\n\nimport NavigationLinks from './NavigationLinks';\nimport './PageContainer.css'\n\nconst PageContainer = props => {\n    return (\n        <div className=\"page-container\">\n            <NavigationLinks />\n            {props.children}\n        </div>\n    );\n}\n\nexport default PageContainer;","import React from 'react';\n\nconst msToNormal = (milliseconds) => {\n    let seconds = milliseconds/1000;\n    let minutes = Math.floor(seconds/60);\n    seconds = Math.floor(seconds%60);\n    return `${minutes}:${seconds<10? `0${seconds}`: seconds}`;\n}\n\nconst popToSize = (popularity) => {\n    return (0.4 + popularity/80);\n}\n\nconst percentColor = (percentage) => {\n    return Math.floor(128-Math.cos(Math.PI*percentage)*127);\n}\nconst cosColor = (percentage) => {\n    return Math.floor((1-(Math.pow(percentage-1, 2)))*255)\n}\n\nconst JourneyRow = props => {\n    let track = props.trackObject.track;\n    return (\n    <tr>\n        <td><img src={track.album.images[2].url} alt={`Album: ${track.album.name}`}/></td>\n        <td>{`${track.name} by ${track.artists[0].name}`}</td>\n        <td>{msToNormal(track.duration_ms)}</td>\n        <td style={{fontSize: `${popToSize(track.popularity)}em`}}>{track.popularity}</td>\n        <td style={{backgroundColor: `rgba(${percentColor(props.trackObject.energy)},30,${255-(percentColor(props.trackObject.energy))},0.6)`}}>{`${Math.round(props.trackObject.energy*10000)/100}%`}</td>\n        <td style={{backgroundColor: `rgba(${percentColor(props.trackObject.valence)},${cosColor(props.trackObject.valence)},${255-percentColor(props.trackObject.valence)},0.6)`}}>{`${Math.round(props.trackObject.valence*10000)/100}%`}</td>\n        <td>{props.trackObject.played_at}</td>\n    </tr>\n    );\n}\n\nexport default JourneyRow;","import { createContext } from 'react';\n\nexport const AuthContext = createContext({\n    isLoggedIn: false,\n    access_token: '',\n    refresh_token: '',\n    login: () => {}, \n    logout: () => {}\n});","import React, { useState, useContext, useEffect } from 'react';\nimport SpotifyWebApi from '../../util/spotify-web-api';\nimport { AuthContext } from '../../util/auth-context';\nimport JourneyRow from './JourneyRow';\n\nimport './JourneyTable.css';\n\n//Data fetch cycle to occur on mounting with useEffect() hook\n//we may move this up a layer as journey might need to pass the object to an overview panel too..\nimport {recentTracks as DUMMY_DATA} from './RecentTrack';\n\n\nconst JourneyTable = props => {\n    /*let auth = useContext(AuthContext);\n\n    let recent_tracks = props.recent_tracks;\n\n    let final_tracks;\n    \n    let track_ids = recent_tracks.map(trackObj => trackObj.track.id);\n\n    let data = {features: [], isFetching: false, fetched: false};\n\n    let Spotify = new SpotifyWebApi();\n    Spotify.setAccessToken(auth.access_token);\n\n    //look to using a reducer for better efficiency, statefullness and rendering bye for now\n\n    if(props.recent_tracks){\n        if(props.recent_tracks.length>0){\n            recent_tracks = props.recent_tracks;\n        }\n    }\n\n    const joinTables = () =>{\n        if(!Object.keys(recent_tracks[0]).find(key => key===\"valence\")){\n            //Same length and not containing a feature from a join is a sufficient condition to join\n            final_tracks = recent_tracks.map( (obj, idx) => {\n                return {...obj,\n                        \"energy\": data.features[idx].energy,\n                        \"valence\": data.features[idx].valence}\n            });\n        }\n    }\n\n    const fetchFeatures = async () => {\n            data = {features: data.features, isFetching: true, fetched: false};\n            Spotify.getAudioFeaturesForTracks(track_ids)\n                .then(res => {\n                    if( res && res.audio_features.length>0 && res.audio_features[0] ){\n                        data = {features: res.audio_features, isFetching: false, fetched: true};\n                        joinTables();\n                    }\n                })\n                .catch(err => {\n                    console.log(err);\n                    data = {features: data.features, isFetching: false, fetched: false}\n                })\n    }\n\n    \n    if(!data.isFetching && !data.fetched && data.features.length===0)\n        setTimeout(()=>{if(!data.isFetching){fetchFeatures()}},150);\n\n    \n    //console.log('u got' + recent_tracks.length>0? recent_tracks.items[0].trackObject.track.name: '{blank}');\n    //if(!data.fetched && data.isFetching && final_tracks===undefined){\n        return (\n            <table className=\"journey-table\">\n            <thead>\n                <tr>\n                    <th>Cover</th>\n                    <th>Track Name + Artist</th>\n                    <th>Runtime</th>\n                    <th>Popularity</th>\n                    <th>Energy</th>\n                    <th>Valence</th>\n                    <th>Played at</th>\n                </tr>\n            </thead>\n            </table>\n        )\n    } else {*/\n\n    let final_tracks = props.recent_tracks;\n    console.log(\"Tracks object\\n\");\n    console.log(final_tracks[0]);\n    return (\n        <table className=\"journey-table\">\n            <thead>\n                <tr>\n                    <th>Cover</th>\n                    <th>Track Name + Artist</th>\n                    <th>Runtime</th>\n                    <th>Popularity</th>\n                    <th>Energy</th>\n                    <th>Positivity</th>\n                    <th>Played at</th>\n                </tr>\n            </thead>\n            <tbody>\n                {final_tracks?final_tracks.map( (trackObj, index) => <JourneyRow trackObject={trackObj} key={index} />):<tr><td>sorry</td></tr>}\n            </tbody>\n        </table>\n    );\n//}\n}\n\nexport default JourneyTable;","import SpotifyWebApi from '../util/spotify-web-api';\nconst Spotify = new SpotifyWebApi();\n\nconst fetchRecents = async () => \n{\n    let returnobj;\n        await Spotify.getMyRecentlyPlayedTracks({limit: 50}).then(\n            (data) => {\n                returnobj = data.items;\n            },\n            (err) => {\n                console.error(err);\n            }\n        );\n    return returnobj;\n}\n\nconst getTrackFeatures = async (track_ids) => \n{\n    let returnobj;\n    await Spotify.getAudioFeaturesForTracks(track_ids).then(\n        (data) => {\n            returnobj = data.audio_features;\n        },\n        (err) => {\n            console.error(err);\n        }\n    );\n    return returnobj;\n}\nlet getJourneyDataGate = false;\n\nexport const getJourneyData = async (access_token) =>\n{\n    let finalData;\n    if(!getJourneyDataGate){\n    Spotify.setAccessToken(access_token);\n    let track_ids;\n    let recentsData;\n    let recentsFeatures;\n    \n    console.log(\"Getting journey data try \");\n\n    await fetchRecents()\n        .then((res) => {\n            //console.log(res);\n            recentsData = res;\n            return res;\n        })\n        .then((res) => {\n            if(!res) throw Error(\"No response 1\");\n            else{\n                track_ids = res.map(trackObj => trackObj.track.id);\n                return track_ids;\n            };\n        })\n        .then(async (track_ids) => {\n            recentsFeatures = await getTrackFeatures(track_ids)\n                .then(feat => {\n                    console.log(feat);\n                    if(!recentsData) throw Error(\"No response 2\"+recentsData);\n                    else{\n                        finalData = recentsData.map( (obj, idx) => {\n                        return {...obj,\n                                \"energy\": feat[idx].energy,\n                                \"valence\": feat[idx].valence\n                                }\n                        });\n                    } \n                });\n        }\n        )\n        .catch((err)=> console.error(err));\n    }\n    return finalData;\n}\n\nexport const getUsername = async (access_token) => \n{\n    let returnobj;\n    Spotify.setAccessToken(access_token);\n    await Spotify.getMe().then(\n        (data) => {\n            returnobj = data.display_name;\n        },\n        (err) => {\n            console.error(err);\n        }\n    );\n    return returnobj;\n}","import React, { useContext, useState, useEffect } from 'react';\nimport PageContainer from '../components/MainUI/PageContainer';\nimport JourneyTable from '../components/Journey/JourneyTable';\nimport { AuthContext } from '../util/auth-context';\nimport {getJourneyData, getUsername} from '../controllers/spotifyShaper';\n//import SpotifyWebApi from '../util/spotify-web-api';\n//import { response } from 'express';\n//import axios from 'axios';\n\nconst Journey = props => {\n    //let auth = useContext(AuthContext);\n    console.log(\"Cookie => \"+document.cookie);\n    let access_token;\n    if(document.cookie.includes(\"acc_tok\")){\n        access_token = document.cookie.split('=')[1];\n    } \n    const [username, setUsername] = useState(\"\");\n    const [data, setData] = useState([]);\n    \n    let init = async () => {\n        //auth.access_token\n        let u = await getUsername(access_token);\n        setUsername(u);\n        let d = await getJourneyData(access_token);\n        setData(d);\n    }\n    useEffect(()=>init(),[]);\n    /*\n    let Spotify = new SpotifyWebApi();\n    Spotify.setAccessToken(auth.access_token);\n\n    const fetchTracks = async () => {\n            setData({tracks: data.tracks, isFetching: true, fetched: false});\n            Spotify.getMyRecentlyPlayedTracks({limit: 50})\n                .then(res => {\n                    setData({tracks: res.items, isFetching: false, fetched: true});\n                })\n                .catch(err => {\n                    console.log(err);\n                    setData({tracks: data.tracks, isFetching: false, fetched: false})\n                })\n    }\n    if(!data.isFetching && !data.fetched && data.tracks.length===0)\n        setTimeout(()=>fetchTracks(),100);\n        setInterval(()=>fetchTracks(), 15000);\n\n\n    const fetchName = async () => {\n            setUsername({name: username.name, isFetching: true, fetched: false});\n            Spotify.getMe()\n                .then(res => {\n                    setUsername({name: res.display_name, isFetching: false, fetched: true});\n                })\n                .catch(err => {\n                    console.log(err);\n                    setUsername({name: username.name, isFetching: false, fetched: false})\n                })\n    }\n    \n    if(!username.isFetching && !username.fetched && username.name==='')\n        setTimeout(()=>fetchName(),100);\n    \n    */\n    return (\n        <PageContainer>\n            <p>Welcome {username? username: \"Loading\"}</p>\n            <h2> Listening History </h2>\n            {data && data.length === 0 && <span> Loading ••• </span>}\n            {data && data.length > 0 && <JourneyTable recent_tracks={data}/>}\n        </PageContainer>\n    );\n}\n\nexport default Journey;","import React, { useState, useCallback, useEffect } from 'react';\nimport { BrowserRouter as Router, Route, Redirect, Switch } from 'react-router-dom';\n//import { AuthContext } from './util/auth-context';\nimport Navigation from './components/MainUI/Navigation';\n//import Login from './util/Login';\nimport Landing from './pages/Landing';\nimport Footer from './components/MainUI/Footer';\nimport Journey from './pages/Journey';\n\n//Add Oauth here with contextual routing based on authorization ( has access token )\n//If !auth then redirect to \"/auth\" which contains landing page\n//If auth then \n//default is \"/\" for recent tracks called JOURNEY\n//path \"/top\" is modified by \"/artists\" or \"/tracks\" called TOP 50\n//path \"/saved\" is modified by playlists albums artists songs etc. called SAVED\n\n//function useQuery() {\n//  return new URLSearchParams(useLocation().search);\n//}\nvar isLoggedIn = false;\nvar access_token = \"\";\nfunction App() {\n  useEffect(() => {\n  if(!isLoggedIn && document.cookie.includes(\"acc_tok\")){\n    access_token = document.cookie\n      .split(';')\n      .find((row) => row.startsWith('acc_tok'))\n      .split('=')[1];\n    isLoggedIn = true;\n  }\n  console.log(\"Mounted\");\n  return function cleanup(){\n    console.log(\"Cleaning up\");\n    document.cookie = encodeURIComponent('acc_tok=;');\n  }\n},[])\n\n  if(!isLoggedIn && document.cookie.includes(\"acc_tok\")){\n    access_token = document.cookie\n      .split(';')\n      .find((row) => row.startsWith('acc_tok'))\n      .split('=')[1];\n    isLoggedIn = true;\n  }\n  /*\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [accessToken, setAccessToken] = useState('');\n  const [refreshToken, setRefreshToken] = useState('');\n\n  const login = useCallback((access_t, refresh_t) => {\n    setIsLoggedIn(true);\n    setAccessToken(access_t);\n    setRefreshToken(refresh_t);\n  }, []);\n  \n  const logout = useCallback(() => {\n    setIsLoggedIn(false);\n    setAccessToken('');\n    setRefreshToken('');\n  }, []);\n  */\n  let routes;\n\n  if( !isLoggedIn ){\n    routes = (\n      <Switch>\n        <Route path=\"/\" exact>\n          <Landing />\n        </Route>\n        <Redirect to=\"/\" />\n      </Switch>\n    );\n  }\n  else{\n    routes = (\n      <Switch>\n          <Route path=\"/journey\" >\n            <Journey />\n          </Route>\n          <Route path=\"/top/tracks\" >\n            <Journey />\n          </Route>\n          <Route path=\"/top/artists\" >\n            <Journey />\n          </Route>\n          <Redirect to=\"/journey\" />\n        </Switch>\n    );\n  }\n\n  return (\n      <Router>\n        <Navigation />\n        <main>\n          {routes}\n        </main>\n        <Footer />\n      </Router>\n  );\n}\n\n/*const Login = props => {\n  let auth = useContext(AuthContext);\n  let query = useQuery();\n  \n  if( query.get(\"error\") ){\n      console.log(\"ERROR FOUND\");\n      return (<Redirect to=\"/\" />);\n  }\n  //No error\n  let access_token = query.get(\"access_token\") || null;\n  let refresh_token = query.get(\"refresh_token\") || null;\n  if( access_token && refresh_token ){\n      console.log(\"LOGGED IN\");\n      setTimeout(()=>auth.login(access_token, refresh_token),1000);\n  } \n  return (<Redirect to=\"/\" />);\n}*/\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render( <App />, document.getElementById('root') );"],"sourceRoot":""}